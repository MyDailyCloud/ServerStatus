name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.3'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.3'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build data-server
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p release
        cd data-server
        if [ "$GOOS" = "windows" ]; then
          go build -ldflags "-s -w -X main.version=${{ github.ref_name }}" -o ../release/data-server-${{ matrix.goos }}-${{ matrix.goarch }}.exe ./main.go
        else
          go build -ldflags "-s -w -X main.version=${{ github.ref_name }}" -o ../release/data-server-${{ matrix.goos }}-${{ matrix.goarch }} ./main.go
        fi
    
    - name: Build monitor-agent
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        cd monitor-agent
        if [ "$GOOS" = "windows" ]; then
          go build -ldflags "-s -w -X main.version=${{ github.ref_name }}" -o ../release/monitor-agent-${{ matrix.goos }}-${{ matrix.goarch }}.exe ./main.go
        else
          go build -ldflags "-s -w -X main.version=${{ github.ref_name }}" -o ../release/monitor-agent-${{ matrix.goos }}-${{ matrix.goarch }} ./main.go
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: serverstatus-${{ matrix.goos }}-${{ matrix.goarch }}
        path: release/*
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true
    
    - name: Prepare release assets
      run: |
        mkdir -p release-final
        find artifacts -name "*" -type f -exec cp {} release-final/ \;
        ls -la release-final/
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release-final/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}